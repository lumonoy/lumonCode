/**
 * @description       : 
 * @author            : Henk Reynders
 * @group             : 
 * @last modified on  : 05-26-2024
 * @last modified by  : Henk Reynders
**/
//
// Generated by JSON2Apex http://json2apex.herokuapp.com/
//
// The supplied json has fields with names that are not valid in apex
// and so can only be parsed with explicitly generated code, this option
// was auto selected for you.

public class DocumentationXMLData {

	public class Space {
		public String corner_multiplier {get;set;} 
		public String floor_height {get;set;} 
		public String balcony_plate_height {get;set;} 
		public Sides sides {get;set;} 

		public Space(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'corner_multiplier') {
							corner_multiplier = parser.getText();
						} else if (text == 'floor_height') {
							floor_height = parser.getText();
						} else if (text == 'balcony_plate_height') {
							balcony_plate_height = parser.getText();
						} else if (text == 'sides') {
							sides = new Sides(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Space consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Balconyglazing {
		public String product_code {get;set;} 
		public String product_code_short {get;set;} 
		public String structural_version_number {get;set;} 
		public String unique_system_id {get;set;} 
		public String is_reclaimed {get;set;} 
		public String product_status {get;set;} 
		public String product_weight {get;set;} 
		public Order_xml_info order_xml_info {get;set;} 
		//public Installation_xml_info installation_xml_info {get;set;} 
		public String start_reduction {get;set;} 
		public String end_reduction {get;set;} 
		public String plastic_color {get;set;} 
		public String heat_soak {get;set;} 
		public String glass_default_width {get;set;} 
		public String glass_type {get;set;} 
		public String glass_thickness {get;set;} 
		public String glass_color {get;set;} 
		public String external_sill {get;set;} 
		public String external_sill_seal {get;set;} 
		public String end_plugs {get;set;} 
		public String upper_profile {get;set;} 
		public String upper_profile_color {get;set;} 
		public String upper_profile_connection_material {get;set;} 
		public String lower_profile {get;set;} 
		public String lower_profile_color {get;set;} 
		public String lower_profile_connection_material {get;set;} 
		public String upper_brackets {get;set;} 
		public String lower_brackets {get;set;} 
		public String left_edge_seal {get;set;} 
		public String left_edge_seal_color {get;set;} 
		public String right_edge_seal {get;set;} 
		public String right_edge_seal_color {get;set;} 
		public String watering_holes {get;set;} 
		public String glass_seals {get;set;} 
		public String attention_tape {get;set;} 
		public String pull_latch {get;set;} 
		public String upper_seal {get;set;} 
		public String lower_seal {get;set;} 
		public String decibel_sealing {get;set;} 
		public String balustrade_seal {get;set;} 
		public String vertical_frame {get;set;} 
		public String embedded_feature {get;set;} 
		public String lower_profile_fastening_holes {get;set;} 
		public Sides_Z sides {get;set;} 
		public Other_products other_products {get;set;} 

		public Balconyglazing(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'product_code') {
							product_code = parser.getText();
						} else if (text == 'product_code_short') {
							product_code_short = parser.getText();
						} else if (text == 'structural_version_number') {
							structural_version_number = parser.getText();
						} else if (text == 'unique_system_id') {
							unique_system_id = parser.getText();
						} else if (text == 'is_reclaimed') {
							is_reclaimed = parser.getText();
						} else if (text == 'product_status') {
							product_status = parser.getText();
						} else if (text == 'product_weight') {
							product_weight = parser.getText();
						} else if (text == 'order_xml_info') {
							order_xml_info = new Order_xml_info(parser);
						/*} else if (text == 'installation_xml_info') {
							installation_xml_info = new Installation_xml_info(parser);*/
						} else if (text == 'start_reduction') {
							start_reduction = parser.getText();
						} else if (text == 'end_reduction') {
							end_reduction = parser.getText();
						} else if (text == 'plastic_color') {
							plastic_color = parser.getText();
						} else if (text == 'heat_soak') {
							heat_soak = parser.getText();
						} else if (text == 'glass_default_width') {
							glass_default_width = parser.getText();
						} else if (text == 'glass_type') {
							glass_type = parser.getText();
						} else if (text == 'glass_thickness') {
							glass_thickness = parser.getText();
						} else if (text == 'glass_color') {
							glass_color = parser.getText();
						} else if (text == 'external_sill') {
							external_sill = parser.getText();
						} else if (text == 'external_sill_seal') {
							external_sill_seal = parser.getText();
						} else if (text == 'end_plugs') {
							end_plugs = parser.getText();
						} else if (text == 'upper_profile') {
							upper_profile = parser.getText();
						} else if (text == 'upper_profile_color') {
							upper_profile_color = parser.getText();
						} else if (text == 'upper_profile_connection_material') {
							upper_profile_connection_material = parser.getText();
						} else if (text == 'lower_profile') {
							lower_profile = parser.getText();
						} else if (text == 'lower_profile_color') {
							lower_profile_color = parser.getText();
						} else if (text == 'lower_profile_connection_material') {
							lower_profile_connection_material = parser.getText();
						} else if (text == 'upper_brackets') {
							upper_brackets = parser.getText();
						} else if (text == 'lower_brackets') {
							lower_brackets = parser.getText();
						} else if (text == 'left_edge_seal') {
							left_edge_seal = parser.getText();
						} else if (text == 'left_edge_seal_color') {
							left_edge_seal_color = parser.getText();
						} else if (text == 'right_edge_seal') {
							right_edge_seal = parser.getText();
						} else if (text == 'right_edge_seal_color') {
							right_edge_seal_color = parser.getText();
						} else if (text == 'watering_holes') {
							watering_holes = parser.getText();
						} else if (text == 'glass_seals') {
							glass_seals = parser.getText();
						} else if (text == 'attention_tape') {
							attention_tape = parser.getText();
						} else if (text == 'pull_latch') {
							pull_latch = parser.getText();
						} else if (text == 'upper_seal') {
							upper_seal = parser.getText();
						} else if (text == 'lower_seal') {
							lower_seal = parser.getText();
						} else if (text == 'decibel_sealing') {
							decibel_sealing = parser.getText();
						} else if (text == 'balustrade_seal') {
							balustrade_seal = parser.getText();
						} else if (text == 'vertical_frame') {
							vertical_frame = parser.getText();
						} else if (text == 'embedded_feature') {
							embedded_feature = parser.getText();
						} else if (text == 'lower_profile_fastening_holes') {
							lower_profile_fastening_holes = parser.getText();
						} else if (text == 'sides') {
							sides = new Sides_Z(parser);
						} else if (text == 'other_products') {
							other_products = new Other_products(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Balconyglazing consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Products {
		public String name {get;set;} 
		public Space space {get;set;} 
		public Balconyglazing balconyglazing {get;set;} 
		

		public Products(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'name') {
							name = parser.getText();
						} else if (text == 'space') {
							space = new Space(parser);
						} else if (text == 'balconyglazing') {
							balconyglazing = new Balconyglazing(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Products consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public Products products {get;set;} 

	public DocumentationXMLData(JSONParser parser) {
		while (parser.nextToken() != System.JSONToken.END_OBJECT) {
			if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
				String text = parser.getText();
				if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
					if (text == 'products') {
						products = new Products(parser);
					} else {
						System.debug(LoggingLevel.WARN, 'DocumentationXML consuming unrecognized property: '+text);
						consumeObject(parser);
					}
				}
			}
		}
	}
	
	public class Glass {
		public String is_reclaimed {get;set;} 
		public String number_Z {get;set;} // in json: number
		public String height {get;set;} 
		public String width {get;set;} 
		public String rail {get;set;} 
		public String blinds {get;set;} 
		public String sandblasting {get;set;} 
		public Differences differences {get;set;} 
		public String reclaimed_features {get;set;} 

		public Glass(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'is_reclaimed') {
							is_reclaimed = parser.getText();
						} else if (text == 'number') {
							number_Z = parser.getText();
						} else if (text == 'height') {
							height = parser.getText();
						} else if (text == 'width') {
							width = parser.getText();
						} else if (text == 'rail') {
							rail = parser.getText();
						} else if (text == 'blinds') {
							blinds = parser.getText();
						} else if (text == 'sandblasting') {
							sandblasting = parser.getText();
						} else if (text == 'differences') {
							differences = new Differences(parser);
						} else if (text == 'reclaimed_features') {
							reclaimed_features = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Glass consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	
	
	public class Other_products {
		public String order_xml_info {get;set;} 
		public String installation_xml_info {get;set;} 
		public String is_reclaimed {get;set;} 

		public Other_products(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'order_xml_info') {
							order_xml_info = parser.getText();
						} else if (text == 'installation_xml_info') {
							installation_xml_info = parser.getText();
						} else if (text == 'is_reclaimed') {
							is_reclaimed = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Other_products consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Order_xml_info {
		public String rivipaino {get;set;} 
		public Sivut sivut {get;set;} 

		public Order_xml_info(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'rivipaino') {
							rivipaino = parser.getText();
						} else if (text == 'sivut') {
							sivut = new Sivut(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Order_xml_info consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	
	
	
	
	public class Side_Z {
		public String number_Z {get;set;} // in json: number
		public String space_side_number {get;set;} 
		public String is_reclaimed {get;set;} 
		public String product_side_status {get;set;} 
		public String side_weight {get;set;} 
		public String start_angle {get;set;} 
		public String system_angle {get;set;} 
		public String end_angle {get;set;} 
		public String z_measure {get;set;} 
		public String structural_height {get;set;} 
		public String structural_width {get;set;} 
		public String product_height {get;set;} 
		public String product_width {get;set;} 
		public String opening_width {get;set;} 
		public String opening_height {get;set;} 
		public String lower_reduction {get;set;} 
		public String upper_reduction {get;set;} 
		public String start_reduction {get;set;} 
		public String end_reduction {get;set;} 
		public String glasses_left {get;set;} 
		public String glasses_right {get;set;} 
		public String glasses_left_allowed {get;set;} 
		public String glasses_right_allowed {get;set;} 
		public String corner_bypass {get;set;} 
		public String latch {get;set;} 
		public String adjustment_screw {get;set;} 
		public String h3 {get;set;} 
		public String glass_height {get;set;} 
		public String connecting_profiles_right {get;set;} 
		public String balustrade_width {get;set;} 
		public String latch_left {get;set;} 
		public String latch_left_height {get;set;} 
		public String latch_right {get;set;} 
		public String latch_right_height {get;set;} 
		public String profile {get;set;} 
		public String profile_extension_left {get;set;} 
		public String profile_extension_right {get;set;} 
		public String sliding {get;set;} 
		public String bracket_color {get;set;} 
		public String differences {get;set;} 
		public String reclaimed_features {get;set;} 
		public Glasses glasses {get;set;} 
		public String connecting_profiles_left {get;set;} 

		public Side_Z(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'number') {
							number_Z = parser.getText();
						} else if (text == 'space_side_number') {
							space_side_number = parser.getText();
						} else if (text == 'is_reclaimed') {
							is_reclaimed = parser.getText();
						} else if (text == 'product_side_status') {
							product_side_status = parser.getText();
						} else if (text == 'side_weight') {
							side_weight = parser.getText();
						} else if (text == 'start_angle') {
							start_angle = parser.getText();
						} else if (text == 'system_angle') {
							system_angle = parser.getText();
						} else if (text == 'end_angle') {
							end_angle = parser.getText();
						} else if (text == 'z_measure') {
							z_measure = parser.getText();
						} else if (text == 'structural_height') {
							structural_height = parser.getText();
						} else if (text == 'structural_width') {
							structural_width = parser.getText();
						} else if (text == 'product_height') {
							product_height = parser.getText();
						} else if (text == 'product_width') {
							product_width = parser.getText();
						} else if (text == 'opening_width') {
							opening_width = parser.getText();
						} else if (text == 'opening_height') {
							opening_height = parser.getText();
						} else if (text == 'lower_reduction') {
							lower_reduction = parser.getText();
						} else if (text == 'upper_reduction') {
							upper_reduction = parser.getText();
						} else if (text == 'start_reduction') {
							start_reduction = parser.getText();
						} else if (text == 'end_reduction') {
							end_reduction = parser.getText();
						} else if (text == 'glasses_left') {
							glasses_left = parser.getText();
						} else if (text == 'glasses_right') {
							glasses_right = parser.getText();
						} else if (text == 'glasses_left_allowed') {
							glasses_left_allowed = parser.getText();
						} else if (text == 'glasses_right_allowed') {
							glasses_right_allowed = parser.getText();
						} else if (text == 'corner_bypass') {
							corner_bypass = parser.getText();
						} else if (text == 'latch') {
							latch = parser.getText();
						} else if (text == 'adjustment_screw') {
							adjustment_screw = parser.getText();
						} else if (text == 'h3') {
							h3 = parser.getText();
						} else if (text == 'glass_height') {
							glass_height = parser.getText();
						} else if (text == 'connecting_profiles_right') {
							connecting_profiles_right = parser.getText();
						} else if (text == 'balustrade_width') {
							balustrade_width = parser.getText();
						} else if (text == 'latch_left') {
							latch_left = parser.getText();
						} else if (text == 'latch_left_height') {
							latch_left_height = parser.getText();
						} else if (text == 'latch_right') {
							latch_right = parser.getText();
						} else if (text == 'latch_right_height') {
							latch_right_height = parser.getText();
						} else if (text == 'profile') {
							profile = parser.getText();
						} else if (text == 'profile_extension_left') {
							profile_extension_left = parser.getText();
						} else if (text == 'profile_extension_right') {
							profile_extension_right = parser.getText();
						} else if (text == 'sliding') {
							sliding = parser.getText();
						} else if (text == 'bracket_color') {
							bracket_color = parser.getText();
						} else if (text == 'differences') {
							differences = parser.getText();
						} else if (text == 'reclaimed_features') {
							reclaimed_features = parser.getText();
						} else if (text == 'glasses') {
							glasses = new Glasses(parser);
						} else if (text == 'connecting_profiles_left') {
							connecting_profiles_left = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Side_Z consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Difference {
		public String feature_name {get;set;} 
		public String value {get;set;} 
		public String translation {get;set;} 

		public Difference(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'feature_name') {
							feature_name = parser.getText();
						} else if (text == 'value') {
							value = parser.getText();
						} else if (text == 'translation') {
							translation = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Difference consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Differences {
		public List<Difference> difference {get;set;} 

		public Differences(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'difference') {
							difference = arrayOfDifference(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Differences consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	
	
	public class Side {
		public String number_Z {get;set;} // in json: number
		public String height {get;set;} 
		public String width {get;set;} 
		public String start_angle {get;set;} 
		public String system_angle {get;set;} 
		public String end_angle {get;set;} 
		public String products {get;set;} 
		public String connecting_profiles_right {get;set;} 
		public String connecting_profiles_left {get;set;} 

		public Side(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'number') {
							number_Z = parser.getText();
						} else if (text == 'height') {
							height = parser.getText();
						} else if (text == 'width') {
							width = parser.getText();
						} else if (text == 'start_angle') {
							start_angle = parser.getText();
						} else if (text == 'system_angle') {
							system_angle = parser.getText();
						} else if (text == 'end_angle') {
							end_angle = parser.getText();
						} else if (text == 'products') {
							products = parser.getText();
						} else if (text == 'connecting_profiles_right') {
							connecting_profiles_right = parser.getText();
						} else if (text == 'connecting_profiles_left') {
							connecting_profiles_left = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Side consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Sivu {
		public String numero {get;set;} 
		public String profiilivari_yla {get;set;} // in json: profiilivari-yla
		public String profiilivari_ala {get;set;} // in json: profiilivari-ala
		public String lasi_vahvuus {get;set;} // in json: lasi-vahvuus
		public String lasi_vari {get;set;} // in json: lasi-vari
		public String lasi_karkaisu {get;set;} // in json: lasi-karkaisu
		public String muovivari_yla {get;set;} // in json: muovivari-yla
		public String muovivari_ala {get;set;} // in json: muovivari-ala
		public String profiili_yla {get;set;} // in json: profiili-yla
		public String profiili_ala {get;set;} // in json: profiili-ala
		public String profiili_saato {get;set;} // in json: profiili-saato
		public String profiilipituus {get;set;} 
		public String lasitus_pituus {get;set;} // in json: lasitus-pituus
		public String lasitus_korkeus {get;set;} // in json: lasitus-korkeus
		public String lasivasen_kpl {get;set;} // in json: lasivasen-kpl
		public String lasioikea_kpl {get;set;} // in json: lasioikea-kpl
		public String kulmanylitys {get;set;} 
		public String sivun_paino {get;set;} // in json: sivun-paino
		public String alkukulma {get;set;} 
		public String loppukulma {get;set;} 
		public String jarjestelmakulma {get;set;} 

		public Sivu(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'numero') {
							numero = parser.getText();
						} else if (text == 'profiilivari-yla') {
							profiilivari_yla = parser.getText();
						} else if (text == 'profiilivari-ala') {
							profiilivari_ala = parser.getText();
						} else if (text == 'lasi-vahvuus') {
							lasi_vahvuus = parser.getText();
						} else if (text == 'lasi-vari') {
							lasi_vari = parser.getText();
						} else if (text == 'lasi-karkaisu') {
							lasi_karkaisu = parser.getText();
						} else if (text == 'muovivari-yla') {
							muovivari_yla = parser.getText();
						} else if (text == 'muovivari-ala') {
							muovivari_ala = parser.getText();
						} else if (text == 'profiili-yla') {
							profiili_yla = parser.getText();
						} else if (text == 'profiili-ala') {
							profiili_ala = parser.getText();
						} else if (text == 'profiili-saato') {
							profiili_saato = parser.getText();
						} else if (text == 'profiilipituus') {
							profiilipituus = parser.getText();
						} else if (text == 'lasitus-pituus') {
							lasitus_pituus = parser.getText();
						} else if (text == 'lasitus-korkeus') {
							lasitus_korkeus = parser.getText();
						} else if (text == 'lasivasen-kpl') {
							lasivasen_kpl = parser.getText();
						} else if (text == 'lasioikea-kpl') {
							lasioikea_kpl = parser.getText();
						} else if (text == 'kulmanylitys') {
							kulmanylitys = parser.getText();
						} else if (text == 'sivun-paino') {
							sivun_paino = parser.getText();
						} else if (text == 'alkukulma') {
							alkukulma = parser.getText();
						} else if (text == 'loppukulma') {
							loppukulma = parser.getText();
						} else if (text == 'jarjestelmakulma') {
							jarjestelmakulma = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Sivu consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Sides_Z {
		public List<Side_Z> side {get;set;} 

		public Sides_Z(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'side') {
							side = arrayOfSide_Z(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Sides_Z consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Glasses {
		public List<Glass> glass {get;set;} 

		public Glasses(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'glass') {
							glass = arrayOfGlass(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Glasses consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	/*public class Floor_height {
		public String x_xsi:nil {get;set;} // in json: _xsi:nil

		public Floor_height(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == '_xsi:nil') {
							x_xsi:nil = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Floor_height consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}*/
	
	public class Sivut {
		public List<Sivu> sivu {get;set;} 

		public Sivut(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'sivu') {
							sivu = arrayOfSivu(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Sivut consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Sides {
		public List<Side> side {get;set;} 

		public Sides(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'side') {
							side = arrayOfSide(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Sides consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	/*public class Installation_xml_info {
		public AssemblyDocument AssemblyDocument {get;set;} 

		public Installation_xml_info(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'AssemblyDocument') {
							AssemblyDocument = new AssemblyDocument(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Installation_xml_info consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	/*public class AssemblyDocument {
		public List<Chapter> Chapter {get;set;} 
		public String x_name {get;set;} // in json: _name

		public AssemblyDocument(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'Chapter') {
							Chapter = arrayOfChapter(parser);
						} else if (text == '_name') {
							x_name = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'AssemblyDocument consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	/*public class Chapter {
		public List<Paragraph> Paragraph {get;set;} 
		public String x_name {get;set;} // in json: _name

		public Chapter(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'Paragraph') {
							Paragraph = arrayOfParagraph(parser);
						} else if (text == '_name') {
							x_name = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Chapter consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	public class Paragraph {
		public String paragraphame {get;set;} // in json: _name
		public String x__text {get;set;} // in json: __text

		public Paragraph(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == '_name') {
							x_name = parser.getText();
						} else if (text == '__text') {
							x__text = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Paragraph consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}*/
	/*private static List<Chapter> arrayOfChapter(System.JSONParser p) {
        List<Chapter> res = new List<Chapter>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Chapter(p));
        }
        return res;
    }*/
	/*private static List<Paragraph> arrayOfParagraph(System.JSONParser p) {
        List<Paragraph> res = new List<Paragraph>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Paragraph(p));
        }
        return res;
    }*/
	
	public static DocumentationXMLData parse(String json) {
		System.JSONParser parser = System.JSON.createParser(json);
		return new DocumentationXMLData(parser);
	}
	
	public static void consumeObject(System.JSONParser parser) {
		Integer depth = 0;
		do {
			System.JSONToken curr = parser.getCurrentToken();
			if (curr == System.JSONToken.START_OBJECT || 
				curr == System.JSONToken.START_ARRAY) {
				depth++;
			} else if (curr == System.JSONToken.END_OBJECT ||
				curr == System.JSONToken.END_ARRAY) {
				depth--;
			}
		} while (depth > 0 && parser.nextToken() != null);
	}
	




    private static List<Difference> arrayOfDifference(System.JSONParser p) {
        List<Difference> res = new List<Difference>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Difference(p));
        }
        return res;
    }



    





    private static List<Sivu> arrayOfSivu(System.JSONParser p) {
        List<Sivu> res = new List<Sivu>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Sivu(p));
        }
        return res;
    }













    


    private static List<Side_Z> arrayOfSide_Z(System.JSONParser p) {
        List<Side_Z> res = new List<Side_Z>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Side_Z(p));
        }
        return res;
    }




    private static List<Glass> arrayOfGlass(System.JSONParser p) {
        List<Glass> res = new List<Glass>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Glass(p));
        }
        return res;
    }



    private static List<Side> arrayOfSide(System.JSONParser p) {
        List<Side> res = new List<Side>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Side(p));
        }
        return res;
    }




}