<apex:page controller="LP_ChangePasswordCtrl">
	<style>
		body{
			overflow-x: hidden;
		}
		.error-msg{
			visibility: hidden;
			opacity: 0;
		}
		.error-msg.visible{
			visibility: visible;
			opacity: 1;
		}

		/*checkbox styling*/
        input[type=checkbox] {
			pointer-events: none;
			position: relative;
            width: 20px;
            height: 20px;
            color: #363839;
            border: 1px solid #bdc1c6;
            border-radius: 4px;
            -webkit-appearance: none;
            -moz-appearance: none;
            appearance: none;
            outline: 0;
            cursor: default;
            transition: background 175ms cubic-bezier(0.1, 0.1, 0.25, 1);
        }
        input[type=checkbox]::before {
            position: absolute;
            content: "";
            display: block;
            top: 1px;
            left: 5px;
            width: 5px;
            height: 10px;
            border-style: solid;
            border-color: #fff;
            border-width: 0 2px 2px 0;
            transform: rotate(45deg);
            opacity: 0;
        }
		#wrapper input[type=checkbox]::before {
            top: -1px;
            left: 5px;
		}
        input[type=checkbox]:checked {
            color: #fff;
            border-color: #FFB932;
            background: #FFB932;
        }
        input[type=checkbox]:checked::before {
            opacity: 1;
        }
        input[type=checkbox]:checked ~ label::before {
            -webkit-clip-path: polygon(0 0, 100% 0, 100% 100%, 0 100%);
            clip-path: polygon(0 0, 100% 0, 100% 100%, 0 100%);
        }
		.password-rules{
			font-size: 14px;
		}
		.required{
			color: #E93232;
		}

		#cancelBtn{
			cursor: pointer;
			text-transform: uppercase;
			font-size: 16px;
            background: #FFF;
            border: 2px solid #FFB932;
            border-radius: 5px;
			color: #3C3C3C;
		}
		#wrapper #cancelBtn {
			display: none;
		}
		#submitBtn{
            cursor: pointer;
            text-transform: uppercase;
            font-size: 16px;
            background: #FFB932;
            border: 2px solid #FFB932;
			color: #fff;
		}

        #submitBtn:disabled{
            background-color: #D8D8D8;
            border: 2px solid #D8D8D8;
            color: #A0A0A0;
	        border-radius: 5px;
        }
        .input-field {
            display: flex;
            width: 600px;
			column-gap: 20px;
            align-items: center;
        }
		#wrapper .input-field{
            display: flex;
            width: 330px;
            column-gap: 0;
            align-items: center;
            flex-direction: column;
		}
        .input-field .label{
            width:30%;
            text-align: right;
            font-size: 16px;
			font-weight: bold;
        }
		#wrapper .input-field p.label {
            width: 100%;
            text-align: left;
            font-size: 16px;
            font-weight: bold;
			margin-top: 15px;
        }
        .input-field div{
            flex: 1 1 385px;
		}
        #wrapper .input-field div {
            flex: none;
            width: 100%;
        }
        .input-field .pass-input{
			width:  calc(100% - 10px);
            border: 1px solid #A0A0A0;
            padding: 18px 0 18px 10px;
			border-radius: 5px;
            font-size: 100%;
            margin-top: 6px;
		}
        .server-err-msg {
            color: #E93232;
            font-size: 13px;
		}
        #noMatchErrMsg {
            position: absolute;
            margin: 79px 0 0 2px;
            color: #E93232;
            font-size: 13px;
        }
		#wrapper #noMatchErrMsg {
            margin: -27px 0 0 2px !important;
        }
        .modal-buttons {
            display: flex;
            gap: 20px;
            margin-top: 10px;
        }
		#wrapper .modal-buttons {
            width: 100% !important;
        }
		#submitBtn, #cancelBtn {
			width: 50%;
			padding: 16px;
		}
		#wrapper #submitBtn{
            width: 100%;
            padding: 19px;
		}
		.password-rule{
            display: flex;
            align-items: center;
        }
		.success-msg-container {
			display: none;
		}
		.success-msg-container.visible{
			display: block;
			color: #4CAF50;
			font-size: 16px;
			margin-top: 14px;
			line-height: 4px;
		}
		@media only screen and (max-width:550px){
            .input-field{
				display: block;
                max-width: 600px;
                width: 100%;
			}
            .input-field .label {
                text-align: left;
                margin: 15px 0 0;
				width: 100%;
            }
			.input-field .pass-input {
                width: 90%;
            }
            #submitBtn, #cancelBtn {
				width: 44%;
			}
		}
	</style>

	<script>
		function submitData() {
			const pwdOld = document.getElementById('passwordOld') ? document.getElementById('passwordOld').value : null;
			const pwdNew = document.getElementById('passwordNew').value;
			const pwdRepeat = document.getElementById('passwordRepeat').value;
			doPasswordChange(pwdNew, pwdRepeat, pwdOld);
		}

		let isPasswordValid = false;
		function containsLetters(str) {
			return /[a-z]/i.test(str);
		}
		function containsNumbers(str) {
			return /[0-9]/.test(str);
		}

		window.addEventListener('DOMContentLoaded', () => {
			const minEightCharsCheckbox = document.getElementById('minEightChars');
			const oneLetterCheckbox = document.getElementById('oneLetter');
			const oneNoCheckbox = document.getElementById('oneNumber');
			const pwdOldInput = document.getElementById("passwordOld");
			const pwdNewInput = document.getElementById("passwordNew");
			const pwdRepeatInput = document.getElementById("passwordRepeat");
			const noMatchErrMsg = document.getElementById('noMatchErrMsg');
			let submitBtn = document.getElementById('submitBtn');
			let searchRestrainTimeout = null;
			let arePasswordsEqual = false;
			let pwdOldValue;
			let pwdNewValue;
			let pwdRepeatValue;
			function verifyNewPassword(pass){
				let hasLetter = containsLetters(pass);
				let hasNumber = containsNumbers(pass);
				let hasLength = (pass.length >= 8);
				oneLetterCheckbox.checked = hasLetter;
				oneNoCheckbox.checked = hasNumber;
				minEightCharsCheckbox.checked = hasLength;
				isPasswordValid = hasLetter && hasNumber && hasLength;
			}
			function checkPasswordEquality(pwdRepeat){
				arePasswordsEqual = (pwdRepeat.length > 0 && pwdRepeat === pwdNewValue);
				if(!arePasswordsEqual && pwdRepeat.length > 0){
					noMatchErrMsg.classList.add('visible');
				}else{
					noMatchErrMsg.classList.remove('visible');
				}
				enableSubmitBtn();
			}
			function enableSubmitBtn(){
				let oldPass = '{!$Site.isPasswordExpired}'.toLowerCase() === 'false' ? pwdOldValue.length >= 8 : true;
				submitBtn.disabled = !(oldPass && isPasswordValid && arePasswordsEqual && pwdRepeatValue.length >= 8);
			}
			if(pwdOldInput){
				pwdOldInput.addEventListener("keyup", function() {
					pwdOldValue = this.value;
					enableSubmitBtn();
				});
			}

			pwdNewInput.addEventListener("keyup", function() {
				if (searchRestrainTimeout) {
					clearTimeout(searchRestrainTimeout);
				}
				searchRestrainTimeout = setTimeout(() => {
					pwdNewValue = this.value;
					verifyNewPassword(pwdNewValue);
					enableSubmitBtn();
					searchRestrainTimeout = null;
				}, 300);
			});

			pwdRepeatInput.addEventListener("keyup", function() {
				if (searchRestrainTimeout) {
					clearTimeout(searchRestrainTimeout);
				}
				pwdRepeatValue = this.value;
				searchRestrainTimeout = setTimeout(() => {
					checkPasswordEquality(pwdRepeatValue);
				}, 300);
			});
		});

	</script>

	<apex:form >
		<apex:actionFunction name="doPasswordChange" action="{!changePassword}" reRender="apexResponse" oncomplete="passwordChangeCallBack();">
			<apex:param name="pwdNew" assignTo="{!newPassword}" value="" />
			<apex:param name="pwdRepeat" assignTo="{!verifyNewPassword}" value="" />
			<apex:param name="pwdOld" assignTo="{!oldPassword}" value="" />
		</apex:actionFunction>
		<div class="rules-container">
			<p class="password-rules">{!$Label.LP_Password_Rules}</p>
			<div class="password-requirements">
				<div class="password-rule">
					<input type="checkbox" id="minEightChars" name="minEight" />
					<label class="password-label" for="minEightChars"> {!$Label.LP_Password_Rule_1}</label>
				</div>
				<div class="password-rule">
				<input type="checkbox" id="oneLetter" name="oneLetter" />
					<label class="password-label" for="oneLetter"> {!$Label.LP_Password_Rule_2} </label>
				</div>
				<div class="password-rule">
				<input type="checkbox" id="oneNumber" name="oneNumber" />
					<label class="password-label" for="oneNumber"> {!$Label.LP_Password_Rule_3}</label>
				</div>
			</div>
		</div>
		<apex:outputPanel rendered="{!!$Site.isPasswordExpired}">
			<div class="input-field">
				<p class="label">{!$Label.LP_Current_Password} <span class="required">&#8902;</span></p>
				<div>
					<input class="pass-input" type="password" id="passwordOld" value=""/>
				</div>
			</div>
		</apex:outputPanel>
		<div class="input-field">
			<p class="label">{!$Label.LP_New_Password} <span class="required">&#8902;</span></p>
			<div>
				<input class="pass-input" type="password" id="passwordNew" value="" />
			</div>
		</div>
		<div class="input-field">
			<p class="label">{!$Label.LP_Verify_New_Password} <span class="required">&#8902;</span></p>
			<div>
				<input class="pass-input" type="password" id="passwordRepeat" value="" />
			</div>
		</div>
		<div class="input-field">
			<p class="label"></p>
			<div class="modal-buttons">
				<input type="button" onclick="submitData();" value="{!$Label.LP_Save}" id="submitBtn" disabled="true"/>
				<p id="noMatchErrMsg" class="error-msg">{!$Label.LP_Pswd_Doesnt_Match}</p>
			</div>
		</div>
		<div class="input-field">
			<p class="label"></p>
			<div class="apex-result-container">
				<apex:outputPanel id="apexResponse">
					<script>
						function passwordChangeCallBack(){
							const isError = '{!isError}';
							if(isError === 'false'){
								displaySuccessMessage();
							}
						}
						const displaySuccessMessage = () => (document.getElementById('successContainer').classList.add('visible'));
					</script>
					<p class="server-err-msg">{!errMsg}</p>
					<div id="successContainer"  class="success-msg-container">
						<p class="success-msg-title">{!$Label.LP_Acc_Success_Save_Title}</p>
						<p class="success-msg-text">{!$Label.LP_Acc_Password_Updated_Msg}</p>
					</div>
				</apex:outputPanel>
			</div>
		</div>
	</apex:form>
</apex:page>